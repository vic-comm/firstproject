# -*- coding: utf-8 -*-
"""House price prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JksmaSH6E2J1fO5plmgyjiPxUh_sdLoY
"""

import numpy as np
import seaborn as sns
import pandas as pd
from xgboost import XGBRegressor
import sklearn.datasets
from sklearn.model_selection import  train_test_split
from sklearn import metrics
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing
house_price_dataset = fetch_california_housing()

print(house_price_dataset)

house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns=house_price_dataset.feature_names)
house_price_dataframe.head()

# add the target(price) column to the dataframe
house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

# checking the number of rows and columns in the dataframe
house_price_dataframe.shape

# check for mising value
house_price_dataframe.isnull().sum()

house_price_dataframe.describe()

# understanding the correlation between various features in the dataset
correlation = house_price_dataframe.corr()

# constructing a heatmap
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

x = house_price_dataframe.drop(['price'], axis=1)
y = house_price_dataframe['price']

print(x, y, sep='\n\n\n')

"""***splititing the data into training data and test data***"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2)

print(x.shape, x_test.shape, x_train.shape)

"""MODEL TRAINING

XGBoost Regressor **bold text**
"""

# loading the model
model = XGBRegressor()

# training the model with x_train
model.fit(x_train, y_train)

"""EVALUATION

PREDICTION ON TRAINING DATA
"""

# accuracy for prediction on training data
training_data_prediction = model.predict(x_train)

print(training_data_prediction)

# R squared error
score_1 = metrics.r2_score(y_train, training_data_prediction)

# Mean absolute eerror
score_2 = metrics.mean_absolute_error(y_train, training_data_prediction)

print(f"R squared error : {score_1}")
print(f"Mean absolute error : {score_2}")

"""Visualising the actual prices and predictrd data"""

plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted prices")
plt.title("Actual Price vs Predicted price")
plt.show()

"""Prediction on test data"""

test_data_prediction = model.predict(x_test)

# R squared error
score_1 = metrics.r2_score(y_test, test_data_prediction)

# Mean absolute eerror
score_2 = metrics.mean_absolute_error(y_test, test_data_prediction)

print(f"R squared error : {score_1}")
print(f"Mean absolute error : {score_2}")















